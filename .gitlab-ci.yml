image: java:8-jdk

variables:
  GIT_STRATEGY: clone

before_script:
  - export GRADLE_USER_HOME='pwd'/.gradle
  - chmod +x ./gradlew

cache:
  paths:
    - .gradle/wrapper --gradle-version=6.6.1 --distribution-type=bin
    - .gradle/caches
  # Do anything you have to do before your stages below here.
  # For example, do you need to change permissions on a build folder
  # or modify a file to insert a variable from your CI config here?

# These are the three states we want, building the app, testing it by
# executing unit tests and checking the results, and finally if this
# is the develop or release branch deploying it to Timberlea.
stages:
  # You will need to define this stage somewhere below.
  - build
  # You will need to define this stage somewhere below.
  - test
  # I will provide this example for you below.
  - deploy

build:
  image: gradle:alpine
  stage: build
  script: 
    - ./gradlew assemble
  tags:
    - ugrad


#deployStep:
 # stage: deploy
  #tags:
    # I am tagging the ugrad runner, read this document to learn why:
    # https://helpdesk.cs.dal.ca/gitlab
   # - ugrad
  #artifacts:
   # paths:
      # Change this directory to the path that contains your built executable
    #  - app/build/outputs
  #script:
   # - chmod og-rwx ${DEPLOY_SSH_KEY}
    # The following commands will zip your build folder, and transfer that
    # zip file to the designated Timberlea account. You will need to change
    # the <BUILDDIRECTORY> string to the actual directory where your build artifacts
    # reside when your build commands are complete on the runner.
    # Notice how these commands are using the variables you defined in your GitLab CI/CD
    # settings in earlier steps. It will not work without those variables.
    #- zip -r ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.zip <BUILDDIRECTORY>
    #- scp -r -o StrictHostKeyChecking=no -i "${DEPLOY_SSH_KEY}" <FILE> "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.zip"
